log4j.rootLogger = INFO,CONSOLE,FILE,PRARK,

# 输出日志到控制台
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=INFO
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %-5p [%c] [%t]- %m%n

# 输出日志到文件
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=log/project.log
log4j.appender.FILE.Append=false
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%d %-5p [%c] - %m%n

# 每日一个日志文件
log4j.appender.PRARK=org.apache.log4j.DailyRollingFileAppender
# 日志最低的输出级别
log4j.appender.PRARK.Threshold=INFO
# 日志日期格式
log4j.appender.PRARK.DatePattern='_'yyyy-MM-dd
# 日志编码格式
log4j.appender.PRARK.encoding=UTF-8
# 有日志时立即输出，默认是true
log4j.appender.PRARK.ImmediateFlush=true
# 日志文件的保存位置及文件名
log4j.appender.PRARK.File=log/ProjectDaily.log
# 日志文件的最大大小
log4j.appender.PARAK.maxFileSize=10KB
# 日志布局方式
log4j.appender.PRARK.layout=org.apache.log4j.PatternLayout
# 日志文件中日志的格式
log4j.appender.PRARK.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} PARAK %-5p [%c]- %m%n



#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%r: 输出自应用启动到输出该log信息耗费的毫秒数
#%c: 输出日志信息所属的类目，通常就是所在类的全名
#%t: 输出产生该日志事件的线程名
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#%%: 输出一个"%"字符
#%F: 输出日志消息产生时所在的文件名称
#%L: 输出代码中的行号
#%m: 输出代码中指定的消息,产生的日志具体信息
#%n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行

